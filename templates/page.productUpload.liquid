{% if customer %}
  {% assign customer_id = customer.id %}
  
  <form id="create-product-form">
    <!-- Product Information Fields -->
    <label>Product Title:</label>
    <input type="text" id="title" required>
    <br>

    <input type="text" id="customer_id" value="{{ customer_id }}">
    
    <label>Description:</label>
    <input type="text" id="description" required>
    <br>
    
    <label>Vendor:</label>
    <input type="text" id="vendor" required>
    <br>
    
    <label>Product Type:</label>
    <input type="text" id="productType" required>
    <br>
    
    <label>Price:</label>
    <input type="number" step="0.01" id="price" required>
    <br>
    
    <label>Status:</label>
    <input type="text" id="status" required>
    <br>
    
    <label>Tags:</label>
    <input type="text" id="tags" required>
    <br>

    <!-- Camera Capture Section -->
    <div id="camera-section">
      <button type="button" onclick="startCamera()">Open Camera</button>
      <video id="cameraView" autoplay style="display: none;"></video>
      <button type="button" id="captureBtn" style="display: none;" onclick="captureImage()">Capture</button>
      <canvas id="canvas" style="display: none;"></canvas>
    </div>

    <!-- Preview Captured Image -->
    <div id="previewContainer"></div>

    <!-- File Input for Additional Images -->
    <label>Upload Additional Images:</label>
    <input type="file" id="imageUpload" accept="image/*" multiple>
    
    <button type="submit">Create Product</button>
  </form>

  <div id="form-result"></div>

  <script>
    document.getElementById('create-product-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Collect form data
      let productData = {
        title: document.getElementById('title').value,
        customerId: document.getElementById('customer_id').value,
        description: document.getElementById('description').value,
        vendor: document.getElementById('vendor').value,
        productType: document.getElementById('productType').value,
        price: document.getElementById('price').value,
        status: document.getElementById('status').value,
        tags: document.getElementById('tags').value,
        images: []
      };

      // Process uploaded images
      let imageInput = document.getElementById("imageUpload");
      if (imageInput.files.length > 0) {
        for (let file of imageInput.files) {
          let base64Image = await convertToBase64(file);
          productData.images.push(base64Image);
        }
      }

      // Process captured image
      let capturedImage = document.getElementById('capturedImage');
      if (capturedImage) {
        productData.images.push(capturedImage.src);
      }

      // Send data to backend
      fetch('http://localhost:5287/api/Product/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.getElementById('form-result').innerHTML = '<p>Product created successfully!</p>';
        } else {
          document.getElementById('form-result').innerHTML = `<p>Error: ${data.error}</p>`;
        }
      })
      .catch(err => {
        console.error('Error:', err);
        document.getElementById('form-result').innerHTML = '<p>An unexpected error occurred.</p>';
      });
    });

    function convertToBase64(file) {
      return new Promise((resolve, reject) => {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
      });
    }

    let cameraStream;
    function startCamera() {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
          cameraStream = stream;
          document.getElementById("cameraView").srcObject = stream;
          document.getElementById("cameraView").style.display = "block";
          document.getElementById("captureBtn").style.display = "block";
        })
        .catch(error => {
          console.error("Camera access denied:", error);
          alert("Camera access is required to capture an image.");
        });
    }

    function captureImage() {
      const video = document.getElementById("cameraView");
      const canvas = document.getElementById("canvas");
      const ctx = canvas.getContext("2d");

      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      let base64Image = canvas.toDataURL("image/jpeg");

      // Show preview of captured image
      let previewContainer = document.getElementById("previewContainer");
      let img = document.createElement("img");
      img.id = "capturedImage";
      img.src = base64Image;
      img.style.width = "100px";
      img.style.margin = "5px";
      previewContainer.appendChild(img);

      // Stop camera
      cameraStream.getTracks().forEach(track => track.stop());
      document.getElementById("cameraView").style.display = "none";
      document.getElementById("captureBtn").style.display = "none";
    }
  </script>

{% else %}
  <p>You must be logged in to create a product.</p>
{% endif %}
